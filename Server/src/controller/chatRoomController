import { FastifyInstance ,FastifyRequest, FastifyReply, FastifySchema, FastifyPluginOptions, RequestGenericInterface, FastifyPluginCallback } from "fastify";

const sendData = function(reply: FastifyReply, code: number = 200,data: any = undefined) {
    reply.code(code);
    reply.send(data);
}

const plugin: FastifyPluginCallback 
    = function(fastify: FastifyInstance, options: FastifyPluginOptions, next) {
        
        fastify.get('/',
        (request: FastifyRequest, reply: FastifyReply) => {
            request.query.id
        });   

        fastify.post('/', {
            schema: {
                body: {
                    properties: {
                        recipient: {
                            type: 'array',
                            items: { type: 'string' }
                        }
                    }
                }
            }
        },
        (req: FastifyRequest<RequestInterface>, reply: FastifyReply) => {
            console.log(req.body);
            chatModel.exists({ recipient: req.body.recipient })
            .then(async (res: boolean): Promise<any> => {
                if(!res) return await chatModel.create({ recipient: req.body.recipient});
                else return Promise.resolve({message: "already exists"});
            })
            .then((data): void => {
                sendData(reply, 201, data);
            })
            .catch((err) => {
                console.log(`chat doc save error: ${err}`);
                sendData(reply, 400, err);
            });
        });

        next();
    };

    export default plugin;
